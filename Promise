TRAINING CLASS 17:
Promise:
A promise is a special javascript object that represents the eventual completion (or failure) of an asynchronous operation.
Three states:
1.	Pending: The initial state, the promise is still waiting for the operation to finish
2.	Fulfilled: The operation completed successfully
3.	Rejected: The operation failed
To create a promise we use new Promise();
The promise constructor takes a function with two parameters:
resolve- to mark as the promise is successful
reject- to mark it as failed 
Handling:
.then() method is called when the promise is fulfilled.
It receives the result from the resolve();
.catch() method is called when the promise is rejected;
It receives the result from the reject();
Example:
<script>
        let mypromise=new Promise((resolve,reject)=>{
            let success=true
            if(success){
                resolve("The operation was successful")
            }
            else{
                reject("The operation failed")
            }
        });
        mypromise
        .then(result=>{
            console.log(result)
        })
        .catch(error=>{
            console.log(error)
        })
</script>
o/p: The operation was successful

Chaining Promises:
You can have chain multiple .then()
Example:
let mypromise=new Promise((resolve,reject)=>{
            resolve(5);
        })
        mypromise
        .then(result=>{
            console.log(result)
            return result*2
        })
        .then(result=>{
            console.log(result);
            return result+3;
        })
        .then(result=>{
            console.log(result);
        })
        .catch(error=>{
            console.log(error)
        })
o/p:
5
10
13
Promise with setTimeOut
Using setTimeOut the promise will resolve after certain amount of time
Example:
let mypromise=new Promise((resolve,reject)=>{
            setTimeout(()=>{
                resolve("Hi Siri");
            },2000);
        })
        mypromise
        .then(result=>{
            console.log(result);
        })
        .catch(error=>{
            console.log(error);
 })


//vs code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
       // let mypromise=new Promise((resolve,reject)=>{
         //   let success=true
           // if(success){
             //   resolve("The operation was successful")
            //}
            //else{
              //  reject("The operation failed")
            //}
        //});
        //mypromise
        //.then(result=>{
          //  console.log(result)
        //})
        //.catch(error=>{
          //  console.log(error)
        //})

        //let mypromise=new Promise((resolve,reject)=>{
          //  resolve(5);
        //})
        //mypromise
        //.then(result=>{
          //  console.log(result)
            //return result*2
        //})
        //.then(result=>{
          //  console.log(result);
           // return result+3;
        //})
        //.then(result=>{
          //  console.log(result);
        //})
        //.catch(error=>{
          //  console.log(error)
        //})

        let mypromise=new Promise((resolve,reject)=>{
            setTimeout(()=>{
                resolve("Hi Siri");
            },2000);
        })
        mypromise
        .then(result=>{
            console.log(result);
        })
        .catch(error=>{
            console.log(error);
        })
          

    </script>
</body>
</html>

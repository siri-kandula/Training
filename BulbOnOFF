Bulb-On & Off:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: top;
            height: 100vh;
        }
        .light-bulb{
            width: 150px;
        }
        .button{
            font-size: 20px;
            margin-top: 20px;
            padding: 10px 20px;
            cursor:pointer;
        }
    </style>
</head>
<body id="body">
    <img src="https://d1tgh8fmlzexmh.cloudfront.net/ccbp-dynamic-webapps/bulb-go-off-img.png" class="light-bulb" id="bulbImage" alt="">
    <button class="button" id="toggleButton" onclick="toggleLight()">Turn On</button>
    <script>
        let isOn=false;
        function toggleLight(){
            const body=document.getElementById('body');
            const bulbImage=document.getElementById('bulbImage');
            const toggleButton=document.getElementById('toggleButton');
        isOn=!isOn;
        if(isOn){
            body.style.backgroundColor='lightyellow';
            bulbImage.src="https://d1tgh8fmlzexmh.cloudfront.net/ccbp-dynamic-webapps/bulb-go-on-img.png";
            toggleButton.textContent='Turn Off';
        }
        else{
            body.style.backgroundColor='white';
            bulbImage.src="https://d1tgh8fmlzexmh.cloudfront.net/ccbp-dynamic-webapps/bulb-go-off-img.png";
            toggleButton.textContent='Turn On';
        }

        }
    </script>   
</body>
</html>


State:
In react, state is like a container that holds the data or information for a component.
This data can be change over time based on user actions or events.
Why state is important:
It allows us the component to remember things
Ex: If you click a button to change the color;
The state will store hold the color and show on the screen
1.	functional Components:
Syntax:
Const[statevariable, setStatefunction]=useState(initialvalue)
1.	Statevariable: holds the current state.
2.	setStatefunction: A function which is used to update the state
3.	initial value: The initial value of the state variable when the component first renders.



//vs code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: top;
            height: 100vh;
        }
        .light-bulb{
            width: 150px;
        }
        .button{
            font-size: 20px;
            margin-top: 20px;
            padding: 10px 20px;
            cursor:pointer;
            
        }
    </style>
</head>
<body id="body">
    <img src="https://d1tgh8fmlzexmh.cloudfront.net/ccbp-dynamic-webapps/bulb-go-off-img.png" class="light-bulb" id="bulbImage" alt="">
    <button class="button" id="toggleButton" onclick="toggleLight()">Turn On</button>
    <script>
        let isOn=false;
        function toggleLight(){
            const body=document.getElementById('body');
            const bulbImage=document.getElementById('bulbImage');
            const toggleButton=document.getElementById('toggleButton');
        isOn=!isOn;
        if(isOn){
            body.style.backgroundColor='lightyellow';
            bulbImage.src="https://d1tgh8fmlzexmh.cloudfront.net/ccbp-dynamic-webapps/bulb-go-on-img.png";
            toggleButton.textContent='Turn Off';
        }
        else{
            body.style.backgroundColor='white';
            bulbImage.src="https://d1tgh8fmlzexmh.cloudfront.net/ccbp-dynamic-webapps/bulb-go-off-img.png";
            toggleButton.textContent='Turn On';
        }

        }
    </script>    
</body>
</html>
